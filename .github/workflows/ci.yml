# @file: .github/workflows/ci.yml
# @description: CI workflow running linting and tests across Python versions with pip cache
# @dependencies: .pre-commit-config.yaml, requirements.txt
# @created: 2025-08-24

name: CI

env:
  APP_VERSION: v1.0.0-rc1
  GIT_SHA: ${{ github.sha }}

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  pipeline:
    runs-on: ubuntu-latest
    env:
      SPORTMONKS_STUB: "1"
      SPORTMONKS_API_KEY: dummy
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python -m pip install ruff black isort pytest pytest-cov

      - name: lint
        run: |
          python -m ruff check .
          python -m black --check .
          python -m isort --check-only .

      - name: test-fast
        run: make test-fast

      - name: smoke
        run: make test-smoke

      - name: coverage
        run: make coverage-html

      - name: coverage-enforce
        run: python -m diagtools.coverage_enforce --summary-json reports/coverage_summary.json

      - name: reports
        run: |
          python reports/bot_e2e_snapshot.py
          python reports/rc_summary.py --tests-passed --summary-json reports/coverage_summary.json

      - name: artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-and-reports
          path: |
            htmlcov/**
            reports/bot_e2e_snapshot.md
            reports/rc_summary.json
            reports/coverage_summary.json
          retention-days: 14

  amvera-smoke:
    name: amvera-smoke
    runs-on: ubuntu-latest
    needs: pipeline
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Smoke dry-run
        env:
          DB_PATH: ${{ runner.temp }}/amvera/bot.sqlite3
          REPORTS_DIR: ${{ runner.temp }}/amvera/reports
          LOG_DIR: ${{ runner.temp }}/amvera/logs
          MODEL_REGISTRY_PATH: ${{ runner.temp }}/amvera/artifacts
          PYTHONUNBUFFERED: "1"
          ENABLE_HEALTH: "1"
          HEALTH_PORT: "8080"
        run: |
          mkdir -p "$REPORTS_DIR" "$LOG_DIR" "$MODEL_REGISTRY_PATH"
          python -m main --dry-run

  diagnostics-v2:
    name: diagnostics-v2
    runs-on: ubuntu-latest
    needs: pipeline
    env:
      SPORTMONKS_STUB: "1"
      SPORTMONKS_API_KEY: dummy
      DRIFT_REF_DAYS: "90"
      DRIFT_PSI_WARN: "0.1"
      DRIFT_PSI_FAIL: "0.25"
      GOLDEN_COEF_EPS: "0.005"
      GOLDEN_LAMBDA_MAPE: "0.015"
      GOLDEN_PROB_EPS: "0.005"
      BENCH_P95_BUDGET_MS: "800"
      BENCH_ITER: "30"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Run diagnostics suite
        env:
          REPORTS_DIR: ${{ runner.temp }}/diag/reports
          LOG_DIR: ${{ runner.temp }}/diag/logs
          MODEL_REGISTRY_PATH: ${{ runner.temp }}/diag/artifacts
          RUNTIME_LOCK_PATH: ${{ runner.temp }}/diag/runtime.lock
        run: |
          mkdir -p "$REPORTS_DIR" "$LOG_DIR" "$MODEL_REGISTRY_PATH"
          pytest -q
          diag-run --all --reports-dir "$REPORTS_DIR"
          python -m diagtools.golden_regression --check --reports-dir "$REPORTS_DIR"
          diag-drift --reports-dir "$REPORTS_DIR/diagnostics/drift" --ref-days ${DRIFT_REF_DAYS} --ref-rolling-days ${DRIFT_ROLLING_DAYS:-30}
          python -m diagtools.bench --iterations ${BENCH_ITER} --reports-dir "$REPORTS_DIR/diagnostics/bench"

      - name: Upload diagnostics artefacts
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-v2
          path: ${{ runner.temp }}/diag/reports/diagnostics/**
          retention-days: 7

  diagnostics-drift:
    name: diagnostics-drift
    runs-on: ubuntu-latest
    needs: pipeline
    env:
      SPORTMONKS_STUB: "1"
      SPORTMONKS_API_KEY: dummy
      DRIFT_REF_DAYS: "90"
      DRIFT_ROLLING_DAYS: "30"
      DRIFT_PSI_WARN: "0.1"
      DRIFT_PSI_FAIL: "0.25"
      DRIFT_KS_P_WARN: "0.05"
      DRIFT_KS_P_FAIL: "0.01"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Run drift diagnostics
        env:
          REPORTS_DIR: ${{ runner.temp }}/drift/reports
        run: |
          mkdir -p "$REPORTS_DIR"
          diag-drift --reports-dir "$REPORTS_DIR" --ref-days "$DRIFT_REF_DAYS" --ref-rolling-days "$DRIFT_ROLLING_DAYS"

      - name: Upload drift artefacts
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-drift
          path: ${{ runner.temp }}/drift/reports/**
          retention-days: 7

  amvera-ops-v2-smoke:
    name: amvera-ops-v2-smoke
    runs-on: ubuntu-latest
    needs: pipeline
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Dry-run startup
        env:
          DB_PATH: ${{ runner.temp }}/amvera/bot.sqlite3
          REPORTS_DIR: ${{ runner.temp }}/amvera/reports
          LOG_DIR: ${{ runner.temp }}/amvera/logs
          MODEL_REGISTRY_PATH: ${{ runner.temp }}/amvera/artifacts
          PYTHONUNBUFFERED: "1"
          ENABLE_HEALTH: "1"
          ENABLE_METRICS: "1"
          ENABLE_POLLING: "0"
          HEALTH_PORT: "8080"
          METRICS_PORT: "8000"
        run: |
          mkdir -p "$REPORTS_DIR" "$LOG_DIR" "$MODEL_REGISTRY_PATH"
          python -m main --dry-run

      - name: Verify readiness and metrics
        env:
          DB_PATH: ${{ runner.temp }}/amvera/bot.sqlite3
          REPORTS_DIR: ${{ runner.temp }}/amvera/reports
          LOG_DIR: ${{ runner.temp }}/amvera/logs
          MODEL_REGISTRY_PATH: ${{ runner.temp }}/amvera/artifacts
          PYTHONUNBUFFERED: "1"
          ENABLE_HEALTH: "1"
          ENABLE_METRICS: "1"
          ENABLE_POLLING: "0"
          HEALTH_PORT: "8080"
          METRICS_PORT: "8000"
        run: |
          mkdir -p "$REPORTS_DIR" "$LOG_DIR" "$MODEL_REGISTRY_PATH"
          python -m main &
          PID=$!
          sleep 3
          curl -sf http://127.0.0.1:8080/health
          curl -sf http://127.0.0.1:8080/ready
          curl -sf http://127.0.0.1:8000/metrics > /tmp/metrics.txt
          head -n 5 /tmp/metrics.txt
          kill $PID
          wait $PID || true
