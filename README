# Telegram-бот для прогнозирования футбольных матчей (с трёхуровневой вероятностной моделью)

![Python](https://img.shields.io/badge/Python-3.10%2B-blue)
![PostgreSQL](https://img.shields.io/badge/PostgreSQL-14%2B-green)
![Redis](https://img.shields.io/badge/Redis-7-red)
![aiogram](https://img.shields.io/badge/aiogram-3.x-lightblue)
![ML](https://img.shields.io/badge/ML-Advanced%20Probabilistic%20Model-orange)

------------------------------------------------------------------------

## Описание

Этот проект --- **Telegram-бот для прогнозирования футбольных матчей**.\
Он построен на основе **трёхуровневой вероятностной модели**, которая
разделяет:

1.  **Фундаментальные λ (базовые ожидаемые голы)** --- модель силы
    атаки/защиты по xG/xGA с учётом лиги и домашнего преимущества.\
2.  **Динамические модификаторы** --- контекстные корректировки λ на
    основе календаря, мотивации, травм, навыка реализации и прочих
    факторов.\
3.  **Стохастическая симуляция (Монте-Карло / Bivariate Poisson)** ---
    генерация вероятностей исходов через имитацию тысяч возможных
    сценариев матча.

Модель интегрируется с **SportMonks API v3** (матчи, xG, составы,
травмы, погода) и генерирует прогнозы по рынкам:

-   **1X2 (исходы матча)**\
-   **Totals (тоталы голов)**\
-   **BTTS (обе забьют)**\
-   **Точные счета / коррелированные рынки**

Прогнозы дополняются **оценкой уверенности (confidence)** и
**value-рекомендациями**.

------------------------------------------------------------------------

## Архитектура проекта

    telegram-bot/
    ├── config.py                 # Конфигурация (.env, MODEL_VERSION, API keys)
    ├── logger.py                 # Логирование (Loguru, JSON sink, Sentry)
    ├── observability.py          # Sentry (SENTRY_ENABLED) и Prometheus /metrics c метками service/env/version
    ├── database/                 # PostgreSQL + SQLite (dev), Redis, миграции
    │   ├── cache.py
    │   ├── cache_postgres.py
    │   ├── db_logging.py
    │   ├── db_router.py
    │   └── migrations/
    │       ├── env.py
    │       └── versions/
    ├── ml/
    │   ├── base_poisson_glm.py         # Шаг 1: расчёт базовых λ
    │   ├── modifiers_model.py          # Шаг 2: динамические корректировки λ
    │   ├── montecarlo_simulator.py     # Шаг 3: Монте-Карло и BiPoisson
    │   ├── calibration.py              # Калибровка вероятностей (Platt / Isotonic)
    ├── services/
    │   ├── data_processor.py           # Подготовка признаков (xG, PPDA, усталость)
    │   ├── prediction_pipeline.py      # Трёхуровневый пайплайн прогнозов
    │   ├── recommendation_engine.py    # Поиск value и генерация ставок
    │   ├── sportmonks_client.py        # Клиент API
    ├── telegram/
    │   ├── bot.py
    │   ├── handlers/ (start, predict, help, terms)
    │   └── utils/formatter.py          # Форматирование прогнозов
    ├── workers/
    │   ├── prediction_worker.py        # Асинхронные прогнозы по матчам
    │   └── retrain_scheduler.py        # Переобучение моделей
    ├── scripts/
    │   ├── prepare_datasets.py
    │   ├── train_base_glm.py           # обучение GLM для λ
    │   ├── train_modifiers.py          # обучение модели модификаторов
    │   ├── run_training_pipeline.py    # полный цикл обучения + версионирование
    └── requirements.txt

------------------------------------------------------------------------

## Технологии

-   **Python 3.10+**\
-   **PostgreSQL 14+** (хранение прогнозов)\
-   **Redis 7+** (кэш SportMonks и признаков)\
-   **aiogram 3.x** (Telegram-бот)\
-   **SportMonks API v3** (данные xG, составы, травмы, погода)\
-   **scikit-learn / statsmodels / xgboost** (GLM, бустинг
    модификаторов, калибровка)\
-   **numpy, pandas** (обработка данных)\
-   **loguru + Sentry** (логирование и мониторинг)

------------------------------------------------------------------------

## Команды Product v1

- `/start` — приветствие, активные настройки пользователя и ссылки на справку.
- `/today [league] [limit=N]` — матчи на текущую дату с пагинацией и кнопками «Подробнее».
- `/match <id>` и `/explain <id>` — карточка матча и объяснимость (λ, модификаторы, дельты).
- `/league <code> [date]` — расписание лиги с тем же UX, что и `/today`.
- `/subscribe [HH:MM] [league]` — ежедневные дайджесты, данные сохраняются в SQLite (`database/schema.sql`).
- `/settings`, `/export <id>`, `/about`, `/admin stats|reload` — персонализация, экспорт CSV/PNG в `REPORTS_DIR`, метаданные и админ-утилиты.

Подробности и примеры вызова смотрите в [docs/user_guide.md](docs/user_guide.md).

### ENV и кеширование

- `PAGINATION_PAGE_SIZE`, `CACHE_TTL_SECONDS`, `DIGEST_DEFAULT_TIME`, `ADMIN_IDS` — новые переменные окружения.
- Кеширование тяжёлых команд реализовано на in-memory LRU (`app/bot/caching.py`), invalidate — `/admin reload`.
- Экспорт PNG использует `matplotlib>=3.8` (без GUI, backend Agg).

### SportMonks оффлайн-режим и метрики

- `scripts/sm_sync.py --dry-run` запускает полный пайплайн без сети, подставляя фикстуры из `tests/fixtures/sm/*.json` и сохраняя отчёты о коллизиях в `reports/diagnostics/`.
- Для регресса интеграции в CI и локально: `pytest tests/sm tests/model/test_features_ingestion.py tests/bot/test_staleness_badges.py tests/ops/test_freshness_gate.py`.
- ETag/Last-Modified кешируются в SQLite (`sm_meta`) при включённом `SPORTMONKS_CACHE_TTL_SEC>0`, запросы автоматически шлют `If-None-Match`.
- Метрики Prometheus: `sm_requests_total{endpoint,status}`, `sm_ratelimit_sleep_seconds_total`, `sm_freshness_hours_max` (пороговые 12/48 ч управляются `SM_FRESHNESS_WARN_HOURS` и `SM_FRESHNESS_FAIL_HOURS`).

------------------------------------------------------------------------

## Методология трёхуровневой модели

### Шаг 1. Фундаментальные λ (базовые рейтинги)

-   Считаются на основе xG и xGA команд за 1–2 сезона.\
-   Модель: Generalized Linear Model (Poisson GLM) с лог-ссылкой.\
-   Учитывается:
    -   атакующая сила команды\
    -   оборонительная слабость соперника\
    -   среднее по лиге\
    -   домашнее преимущество (HFA)\
-   Результат: (`\lambda`{=tex}\^{(0)}*`\text{home}`{=tex},
    `\lambda`{=tex}\^{(0)}*`\text{away}`{=tex}).

### Шаг 2. Динамические модификаторы

-   Контекстные факторы, влияющие на λ:
    -   **Мотивация:** стадия турнира, необходимость результата.\
    -   **Календарь/усталость:** плотность графика, перелёты, ротации.\
    -   **Кадровые потери:** травмы и дисквалификации ключевых игроков.\
    -   **Навык реализации (ΔxGOT):** разница между xG и фактическими
        голами.\
-   Коррекция λ мультипликативно:\
    \[ `\lambda`{=tex}\^\* = `\lambda`{=tex}\^{(0)}
    `\cdot `{=tex}`\exp`{=tex}(f(`\text{контекст}`{=tex})) \]\
-   Ограничение диапазона (каппинг 0.7–1.4).\
-   Итог: скорректированные (`\lambda`{=tex}\^{\*}\_`\text{home}`{=tex},
    `\lambda`{=tex}\^{\*}\_`\text{away}`{=tex}).

### Шаг 3. Стохастическая симуляция (Монте-Карло / BiPoisson)

-   Генерация исходов на основе λ\*.\
-   ≥10 000 симуляций → вероятности исходов, тоталов, BTTS.\
-   Для коррелированных рынков (точные счёты) используется Bi-Poisson с
    параметром корреляции.\
-   Применяется калибровка вероятностей (Platt / Isotonic).\
-   Результат: распределение вероятностей и рекомендации.

------------------------------------------------------------------------

## Структура базы данных

**Таблица `predictions`:**

-   `id BIGSERIAL PRIMARY KEY`\
-   `fixture_id BIGINT NOT NULL`\
-   `model_version TEXT NOT NULL`\
-   `lambda_base_home NUMERIC(8,4)`\
-   `lambda_base_away NUMERIC(8,4)`\
-   `lambda_final_home NUMERIC(8,4)`\
-   `lambda_final_away NUMERIC(8,4)`\
-   `expected_total NUMERIC(8,4)`\
-   `result_probs JSONB` (1X2 вероятности)\
-   `totals_probs JSONB`\
-   `btts_probs JSONB`\
-   `score_probs JSONB` (топ-3 точных счёта)\
-   `recommendations JSONB`\
-   `confidence NUMERIC(5,4)`

Индексы:\
- UNIQUE (fixture_id, model_version)\
- Индекс по дате матча\
- GIN-индексы по JSONB при необходимости

------------------------------------------------------------------------

## Цепочка обучения и деплоя

1.  **Подготовка датасета**

    ``` bash
    python scripts/prepare_datasets.py
    ```

2.  **Обучение базовых λ (GLM)**

    ``` bash
    python scripts/train_base_glm.py --season 2023_2025
    ```

3.  **Обучение модели модификаторов**

    ``` bash
    python scripts/train_modifiers.py --features context_features.csv
    ```

4.  **Запуск полного пайплайна с версионированием**

    ``` bash
    python scripts/run_training_pipeline.py --auto-version
    ```

5.  **Запуск воркера прогнозов**

    ``` bash
    python workers/prediction_worker.py
    ```

------------------------------------------------------------------------

## Особенности реализации

-   Фиксированная структура λ (base / adjusted) для аудита.\
-   Redis-кэш с TTL (90 секунд --- составы, 6 часов --- турнирные
    таблицы).\
-   Авто-переобучение по расписанию (раз в неделю).\
-   Мониторинг дрифта: PSI признаков, LogLoss и Brier-Score на
    онлайн-данных.\
-   JSON-логирование прогнозов и результатов сравнения с фактическими
    исходами.

------------------------------------------------------------------------

## TODO / Roadmap

-   [ ] Поддержка live-in-play прогнозов\
-   [ ] Расширение модификаторов (погода, судьи, стиль игры)\
-   [ ] REST API для интеграции с внешними сервисами\
-   [ ] Dashboard визуализации confidence и вероятностей\
-   [ ] Автоматический анализ value относительно рыночных коэффициентов
