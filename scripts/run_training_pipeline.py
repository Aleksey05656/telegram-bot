# scripts/run_training_pipeline.py
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π."""
import asyncio
import pandas as pd
from typing import Dict, Any
from logger import logger
from config import get_settings

# === –ù–û–í–´–ô –ö–û–î –î–õ–Ø –≠–¢–ê–ü–ê 9.2 ===
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è
from scripts.train_model import train_league_market

async def run_training_pipeline(datasets: Dict[int, pd.DataFrame], min_matches_threshold: int = 1500) -> None:
    """
    –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ª–∏–≥.
    Args:
        datasets (Dict[int, pd.DataFrame]): –î–∞—Ç–∞—Å–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∏–≥–∏
        min_matches_threshold (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –ª–∏–≥–∏
    """
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
        # –†–∞–∑–¥–µ–ª—è–µ–º –ª–∏–≥–∏ –Ω–∞ –∫—Ä—É–ø–Ω—ã–µ –∏ –º–µ–ª–∫–∏–µ
        large_leagues = {}   # –õ–∏–≥–∏ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
        small_leagues = {}   # –õ–∏–≥–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
        for league_id, df in datasets.items():
            if len(df) >= min_matches_threshold:
                large_leagues[league_id] = df
                logger.info(f"–õ–∏–≥–∞ {league_id} –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –∫—Ä—É–ø–Ω–∞—è ({len(df)} –º–∞—Ç—á–µ–π)")
            else:
                small_leagues[league_id] = df
                logger.info(f"–õ–∏–≥–∞ {league_id} –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –º–µ–ª–∫–∞—è ({len(df)} –º–∞—Ç—á–µ–π)")
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –º–µ–ª–∫–∏—Ö –ª–∏–≥
        global_dataset = None
        if small_leagues:
            small_dfs = list(small_leagues.values())
            global_dataset = pd.concat(small_dfs, ignore_index=True)
            logger.info(f"–°–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –º–µ–ª–∫–∏—Ö –ª–∏–≥: {len(global_dataset)} –º–∞—Ç—á–µ–π")
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –ª–∏–≥
        markets = ["1x2", "btts", "ou_2_5"]
        for league_id, df_league in large_leagues.items():
            logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –ª–∏–≥–∏ {league_id}")
            for market in markets:
                try:
                    logger.info(f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ª–∏–≥–∏ {league_id}, —Ä—ã–Ω–æ–∫ {market}")
                    # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
                    saved_paths = train_league_market(
                        league=str(league_id),
                        market=market,
                        df=df_league,
                        date_col="match_date"
                    )
                    logger.info(f"–ú–æ–¥–µ–ª—å –¥–ª—è –ª–∏–≥–∏ {league_id}, —Ä—ã–Ω–æ–∫ {market} –æ–±—É—á–µ–Ω–∞. "
                               f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {list(saved_paths.keys())}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –ª–∏–≥–∏ {league_id}, —Ä—ã–Ω–æ–∫ {market}: {e}")
                    continue
        # –û–±—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –º–µ–ª–∫–∏—Ö –ª–∏–≥
        if global_dataset is not None and not global_dataset.empty:
            logger.info("–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –º–µ–ª–∫–∏—Ö –ª–∏–≥")
            for market in markets:
                try:
                    logger.info(f"–û–±—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä—ã–Ω–∫–∞ {market}")
                    # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å league="_global"
                    saved_paths = train_league_market(
                        league="_global",
                        market=market,
                        df=global_dataset,
                        date_col="match_date"
                    )
                    logger.info(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä—ã–Ω–∫–∞ {market} –æ–±—É—á–µ–Ω–∞. "
                               f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {list(saved_paths.keys())}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä—ã–Ω–∫–∞ {market}: {e}")
                    continue
        logger.info("üèÅ –ü–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ –æ–±—É—á–µ–Ω–∏—è: {e}", exc_info=True)
# === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê –î–õ–Ø –≠–¢–ê–ü–ê 9.2 ===

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è."""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ë–î)
        # –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ CSV —Ñ–∞–π–ª–æ–≤:
        datasets = {}
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
        # –ù–∞–ø—Ä–∏–º–µ—Ä:
        # import os
        # dataset_files = [f for f in os.listdir("data/datasets") if f.endswith("_dataset.csv")]
        # for file in dataset_files:
        #     league_id = int(file.split("_")[1])
        #     df = pd.read_csv(f"data/datasets/{file}")
        #     datasets[league_id] = df
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
        datasets = {}  # –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã –∑–¥–µ—Å—å
        if not datasets:
            logger.warning("–ù–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç—ã.")
            return
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è
        await run_training_pipeline(datasets, min_matches_threshold=1500)
        logger.info("üèÅ –ü–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}", exc_info=True)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    asyncio.run(main())
