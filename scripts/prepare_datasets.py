# scripts/prepare_datasets.py
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π."""
import asyncio
import os  # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from datetime import datetime, timedelta

import pandas as pd

from logger import logger
from services.data_processor import build_features, data_processor
from services.sportmonks_client import sportmonks_client


# === –ù–û–í–´–ô –ö–û–î –î–õ–Ø –≠–¢–ê–ü–ê 9.1 ===
async def fetch_league_data(league_id: int, seasons: list[int]) -> pd.DataFrame:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∏–≥–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–µ–∑–æ–Ω—ã.
    Args:
        league_id (int): ID –ª–∏–≥–∏ –≤ SportMonks
        seasons (List[int]): –°–ø–∏—Å–æ–∫ ID —Å–µ–∑–æ–Ω–æ–≤
    Returns:
        pd.DataFrame: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –ª–∏–≥–∏
    """
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–≥–∏ {league_id}, —Å–µ–∑–æ–Ω—ã: {seasons}")
        all_matches = []
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–µ–∑–æ–Ω—É
        for season_id in seasons:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–≥–∏ {league_id}, —Å–µ–∑–æ–Ω {season_id}")
            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑—å–º–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞
            two_years_ago = (datetime.now() - timedelta(days=730)).strftime("%Y-%m-%d")
            raw_matches = await sportmonks_client.get_fixtures(
                league_id=league_id,
                season_id=season_id,
                next_fixtures=False,
                date_from=two_years_ago,
            )
            if not raw_matches:
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–≥–∏ {league_id}, —Å–µ–∑–æ–Ω {season_id}")
                continue
            logger.info(
                f"–ü–æ–ª—É—á–µ–Ω–æ {len(raw_matches)} –º–∞—Ç—á–µ–π –¥–ª—è –ª–∏–≥–∏ {league_id}, —Å–µ–∑–æ–Ω {season_id}"
            )
            all_matches.extend(raw_matches)
        if not all_matches:
            logger.warning(
                f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–≥–∏ {league_id} –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–µ–∑–æ–Ω–æ–≤"
            )
            return pd.DataFrame(
                columns=[
                    "match_id",
                    "match_date",
                    "league_id",
                    "home_goals",
                    "away_goals",
                    "home_xg",
                    "away_xg",
                    "home_form",
                    "away_form",
                ]
            )
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DataProcessor
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(all_matches)} –º–∞—Ç—á–µ–π –¥–ª—è –ª–∏–≥–∏ {league_id}")
        processed_results = await data_processor.process_matches_batch(all_matches)
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_matches = [
            result["data"]
            for result in processed_results
            if result["success"] and result["data"]
        ]
        if not successful_matches:
            logger.warning(f"–ù–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –ª–∏–≥–∏ {league_id}")
            return pd.DataFrame(
                columns=[
                    "match_id",
                    "match_date",
                    "league_id",
                    "home_goals",
                    "away_goals",
                    "home_xg",
                    "away_xg",
                    "home_form",
                    "away_form",
                ]
            )
        logger.info(
            f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(successful_matches)} –º–∞—Ç—á–µ–π –¥–ª—è –ª–∏–≥–∏ {league_id}"
        )
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        df_records = []
        for match_data in successful_matches:
            try:
                context = match_data.get("context", {})
                home_stats = match_data.get("home_stats", {})
                away_stats = match_data.get("away_stats", {})
                # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
                record = {
                    "match_id": context.get("fixture_id"),
                    "match_date": context.get("match_date"),
                    "league_id": context.get("league_id"),
                    "home_goals": home_stats.get("goals", 0),
                    "away_goals": away_stats.get("goals", 0),
                    "home_xg": home_stats.get("xg", 0),
                    "away_xg": away_stats.get("xg", 0),
                    "home_form": home_stats.get("form", 0),
                    "away_form": away_stats.get("form", 0),
                    # –î—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å
                }
                df_records.append(record)
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ {match_data.get('fixture_id', 'unknown')}: {e}"
                )
                continue
        if not df_records:
            logger.warning(f"–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DataFrame –¥–ª—è –ª–∏–≥–∏ {league_id}")
            return pd.DataFrame(
                columns=[
                    "match_id",
                    "match_date",
                    "league_id",
                    "home_goals",
                    "away_goals",
                    "home_xg",
                    "away_xg",
                    "home_form",
                    "away_form",
                ]
            )
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(df_records)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
        if "match_date" in df.columns:
            df["match_date"] = pd.to_datetime(df["match_date"])
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∏—á–∏
        df = build_features(df)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        logger.info(f"–°–æ–∑–¥–∞–Ω –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –ª–∏–≥–∏ {league_id} —Å {len(df)} –∑–∞–ø–∏—Å—è–º–∏")
        return df
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–≥–∏ {league_id}: {e}", exc_info=True
        )
        return pd.DataFrame(
            columns=[
                "match_id",
                "match_date",
                "league_id",
                "home_goals",
                "away_goals",
                "home_xg",
                "away_xg",
                "home_form",
                "away_form",
            ]
        )


async def prepare_all_datasets(
    league_seasons: dict[int, list[int]]
) -> dict[int, pd.DataFrame]:
    """
    –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ª–∏–≥.
    Args:
        league_seasons (Dict[int, List[int]]): –°–ª–æ–≤–∞—Ä—å {league_id: [season_ids]}
    Returns:
        Dict[int, pd.DataFrame]: –°–ª–æ–≤–∞—Ä—å –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∏–≥–∏
    """
    try:
        logger.info("–ù–∞—á–∞–ª–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ª–∏–≥")
        datasets = {}
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∏–≥–∏
        for league_id, seasons in league_seasons.items():
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–≥–∏ {league_id}")
            df = await fetch_league_data(league_id, seasons)
            if not df.empty:
                datasets[league_id] = df
                logger.info(
                    f"–î–∞—Ç–∞—Å–µ—Ç –¥–ª—è –ª–∏–≥–∏ {league_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ({len(df)} –∑–∞–ø–∏—Å–µ–π)"
                )
            else:
                logger.warning(f"–î–∞—Ç–∞—Å–µ—Ç –¥–ª—è –ª–∏–≥–∏ {league_id} –ø—É—Å—Ç")
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(datasets)} –ª–∏–≥")
        return datasets
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {e}", exc_info=True)
        return {}


# === –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê –î–õ–Ø –≠–¢–ê–ü–ê 9.1 ===
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤."""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤")
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
        os.makedirs("data/datasets", exist_ok=True)  # –î–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–∏–≥ –∏ —Å–µ–∑–æ–Ω–æ–≤
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        league_seasons = {
            # Premier League (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ ID)
            39: [23855, 22855],  # 2023/24, 2022/23
            # La Liga
            140: [23859, 22859],  # 2023/24, 2022/23
            # Bundesliga
            78: [23863, 22863],  # 2023/24, 2022/23
            # Serie A
            135: [23861, 22861],  # 2023/24, 2022/23
            # Ligue 1
            61: [23857, 22857],  # 2023/24, 2022/23
        }
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã
        datasets = await prepare_all_datasets(league_seasons)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã –≤ —Ñ–∞–π–ª—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        for league_id, df in datasets.items():
            if not df.empty:
                filename = f"data/datasets/league_{league_id}_dataset.csv"
                df.to_csv(filename, index=False)
                logger.info(f"–î–∞—Ç–∞—Å–µ—Ç –¥–ª—è –ª–∏–≥–∏ {league_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        logger.info("üèÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}", exc_info=True)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    asyncio.run(main())
