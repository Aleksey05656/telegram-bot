"""
@file: telegram/handlers/start.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
@dependencies: aiogram, asyncio, sqlite3, config
@created: 2025-09-19
"""
from __future__ import annotations

import asyncio
import sqlite3
from dataclasses import dataclass
from datetime import UTC, datetime
from pathlib import Path

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import settings
from logger import logger
from telegram.handlers.terms import DISCLAIMER_TEXT
from telegram.models import CommandWithoutArgs


@dataclass(slots=True)
class BotStats:
    """Aggregated bot statistics pulled from SQLite state."""

    predictions_total: int = 0
    last_prediction_at: datetime | None = None
    reports_total: int = 0
    last_report_at: datetime | None = None
    users_total: int = 0
    subscriptions_total: int = 0
    last_subscription_at: datetime | None = None
    degraded: bool = False


def _parse_dt(raw: object) -> datetime | None:
    if not raw:
        return None
    if isinstance(raw, datetime):
        return raw if raw.tzinfo else raw.replace(tzinfo=UTC)
    try:
        value = str(raw).strip()
        if not value:
            return None
        dt = datetime.fromisoformat(value.replace("Z", "+00:00").replace(" ", "T"))
    except ValueError:
        return None
    return dt if dt.tzinfo else dt.replace(tzinfo=UTC)


def _table_exists(conn: sqlite3.Connection, name: str) -> bool:
    cur = conn.execute(
        "SELECT 1 FROM sqlite_master WHERE type='table' AND name = ? LIMIT 1",
        (name,),
    )
    return cur.fetchone() is not None


def _count_and_max(
    conn: sqlite3.Connection,
    table: str,
    *,
    max_column: str,
) -> tuple[int, datetime | None]:
    if not _table_exists(conn, table):
        return 0, None
    query = f"SELECT COUNT(*) AS cnt, MAX({max_column}) AS max_ts FROM {table}"
    cur = conn.execute(query)
    row = cur.fetchone()
    if not row:
        return 0, None
    return int(row["cnt"]), _parse_dt(row["max_ts"])


def _load_stats_sync(db_path: Path) -> BotStats:
    if not db_path.exists():
        return BotStats(degraded=True)
    try:
        conn = sqlite3.connect(db_path)
    except sqlite3.Error as exc:  # pragma: no cover - defensive fallback
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %s", exc)
        return BotStats(degraded=True)
    conn.row_factory = sqlite3.Row
    try:
        predictions_total, last_prediction_at = _count_and_max(
            conn, "predictions", max_column="ts"
        )
        reports_total, last_report_at = _count_and_max(
            conn, "reports", max_column="created_at"
        )
        users_total, _ = _count_and_max(conn, "user_prefs", max_column="updated_at")
        subscriptions_total, last_subscription_at = _count_and_max(
            conn, "subscriptions", max_column="updated_at"
        )
    except sqlite3.Error as exc:  # pragma: no cover - defensive fallback
        logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞: %s", exc)
        return BotStats(degraded=True)
    finally:
        conn.close()
    degraded = predictions_total == 0 and last_prediction_at is None
    return BotStats(
        predictions_total=predictions_total,
        last_prediction_at=last_prediction_at,
        reports_total=reports_total,
        last_report_at=last_report_at,
        users_total=users_total,
        subscriptions_total=subscriptions_total,
        last_subscription_at=last_subscription_at,
        degraded=degraded,
    )


async def _load_bot_stats() -> BotStats:
    db_path = Path(settings.DB_PATH)
    return await asyncio.to_thread(_load_stats_sync, db_path)


def _format_dt(value: datetime | None) -> str:
    if not value:
        return "‚Äî"
    return value.astimezone(UTC).strftime("%Y-%m-%d %H:%M UTC")


def _main_menu_builder() -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÆ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="make_prediction")
    builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")
    builder.button(text="üìö –ü—Ä–∏–º–µ—Ä—ã", callback_data="show_examples")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")
    builder.button(text="‚öñÔ∏è –£—Å–ª–æ–≤–∏—è", callback_data="show_terms")
    builder.button(text="‚ö†Ô∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä", callback_data="show_disclaimer")
    builder.adjust(2)
    return builder


async def _send_main_menu(message: Message) -> None:
    try:
        builder = _main_menu_builder()
        await message.answer(
            "üèÜ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Football Predictor Bot</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=builder.as_markup(),
            parse_mode="HTML",
        )
        logger.debug("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", message.from_user.id)
    except Exception as exc:  # pragma: no cover - defensive fallback
        logger.error(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s",
            message.from_user.id,
            exc,
        )
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")


async def _edit_or_send_main_menu(callback: CallbackQuery) -> None:
    builder = _main_menu_builder()
    menu_text = "üèÜ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Football Predictor Bot</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    try:
        await callback.message.edit_text(
            menu_text, reply_markup=builder.as_markup(), parse_mode="HTML"
        )
    except TelegramBadRequest as exc:
        logger.debug(
            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.",
            callback.from_user.id,
            exc,
        )
        await callback.message.answer(
            menu_text, reply_markup=builder.as_markup(), parse_mode="HTML"
        )
    await callback.answer()


async def _build_stats_message() -> str:
    stats = await _load_bot_stats()
    lines = [
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Football Predictor Bot</b>",
        "",
        f"–í–µ—Ä—Å–∏—è: {settings.APP_VERSION} ({settings.GIT_SHA})",
        f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stats.predictions_total}",
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑: {_format_dt(stats.last_prediction_at)}",
        f"–û—Ç—á—ë—Ç–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: {stats.reports_total}",
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç: {_format_dt(stats.last_report_at)}",
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {stats.users_total}",
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats.subscriptions_total}",
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {_format_dt(stats.last_subscription_at)}",
    ]
    if stats.degraded:
        lines.append("")
        lines.append("‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é (DEGRADED)")
    return "\n".join(lines)


router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    try:
        CommandWithoutArgs.parse(message.text)
        logger.info(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%s) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
            message.from_user.id,
            message.from_user.username or "N/A",
        )
        await message.answer(
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Football Predictor Bot!</b>\n\n"
            "ü§ñ –Ø –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ò–ò –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è "
            "–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–æ–≤ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π.\n"
            "üîÆ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–≤—É—Ö –∫–æ–º–∞–Ω–¥, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º "
            "–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞–≤–∫–∞–º.\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
            parse_mode="HTML",
        )
        await _send_main_menu(message)
    except ValueError as exc:
        await message.answer(f"‚ùå {exc}", parse_mode="HTML")
    except Exception as exc:  # pragma: no cover - defensive fallback
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
            message.from_user.id,
            exc,
        )
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML"
        )


@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery) -> None:
    try:
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback.from_user.id)
        await _edit_or_send_main_menu(callback)
    except Exception as exc:  # pragma: no cover - defensive fallback
        logger.error(
            "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
            callback.from_user.id,
            exc,
        )
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "show_help")
async def show_help(callback: CallbackQuery) -> None:
    try:
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É", callback.from_user.id)
        help_text = (
            "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ Football Predictor Bot</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ /predict <code>–ö–æ–º–∞–Ω–¥–∞1 - –ö–æ–º–∞–Ω–¥–∞2</code> - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑\n"
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ /examples - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "‚Ä¢ /terms - –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ /disclaimer - –û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        try:
            await callback.message.edit_text(
                help_text, reply_markup=builder.as_markup(), parse_mode="HTML"
            )
        except TelegramBadRequest as exc:
            logger.debug(
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /help —É %s: %s. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.",
                callback.from_user.id,
                exc,
            )
            await callback.message.answer(
                help_text, reply_markup=builder.as_markup(), parse_mode="HTML"
            )
        await callback.answer()
    except Exception as exc:  # pragma: no cover - defensive fallback
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–ø—Ä–∞–≤–∫–∏: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "show_examples")
async def show_examples(callback: CallbackQuery) -> None:
    try:
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∏–º–µ—Ä—ã", callback.from_user.id)
        examples_text = (
            "üìö <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Football Predictor Bot</b>\n\n"
            "1. –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞:\n"
            "<code>/predict –ë–∞–≤–∞—Ä–∏—è - –ë–æ—Ä—É—Å—Å–∏—è –î</code>\n\n"
            "2. –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–∞—Ç—á–∞ –õ–∏–≥–∏ –ß–µ–º–ø–∏–æ–Ω–æ–≤:\n"
            "<code>/predict –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ - –ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏</code>\n\n"
            "3. –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–∞—Ç—á–µ–π –ê–ü–õ:\n"
            "<code>/predict –õ–∏–≤–µ—Ä–ø—É–ª—å - –ß–µ–ª—Å–∏</code>\n\n"
            "–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥–æ–≤, —Ç–æ—Ç–∞–ª–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Ç.–¥."
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        try:
            await callback.message.edit_text(
                examples_text, reply_markup=builder.as_markup(), parse_mode="HTML"
            )
        except TelegramBadRequest as exc:
            logger.debug(
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /examples —É %s: %s. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.",
                callback.from_user.id,
                exc,
            )
            await callback.message.answer(
                examples_text, reply_markup=builder.as_markup(), parse_mode="HTML"
            )
        await callback.answer()
    except Exception as exc:  # pragma: no cover - defensive fallback
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "show_stats")
async def show_stats(callback: CallbackQuery) -> None:
    try:
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback.from_user.id)
        stats_text = await _build_stats_message()
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        try:
            await callback.message.edit_text(
                stats_text, reply_markup=builder.as_markup(), parse_mode="HTML"
            )
        except TelegramBadRequest as exc:
            logger.debug(
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /stats —É %s: %s. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.",
                callback.from_user.id,
                exc,
            )
            await callback.message.answer(
                stats_text, reply_markup=builder.as_markup(), parse_mode="HTML"
            )
        await callback.answer()
    except Exception as exc:  # pragma: no cover - defensive fallback
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "show_terms")
async def show_terms(callback: CallbackQuery) -> None:
    try:
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª —É—Å–ª–æ–≤–∏—è", callback.from_user.id)
        terms_text = (
            "‚öñÔ∏è <b>–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Football Predictor Bot</b>\n\n"
            "1. –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è '–∫–∞–∫ –µ—Å—Ç—å' –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≥–∞—Ä–∞–Ω—Ç–∏–π.\n"
            "2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–∞—è –±–æ—Ç–æ–º, –Ω–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä.\n"
            "3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ —É–±—ã—Ç–∫–∏ –∏–ª–∏ —É—â–µ—Ä–±, "
            "–≤–æ–∑–Ω–∏–∫—à–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–π –±–æ—Ç–æ–º.\n"
            "4. –ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —ç—Ç–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏."
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.button(text="‚ö†Ô∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä", callback_data="show_disclaimer")
        builder.adjust(2)
        try:
            await callback.message.edit_text(
                terms_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML",
                disable_web_page_preview=True,
            )
        except TelegramBadRequest as exc:
            logger.debug(
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /terms —É %s: %s. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.",
                callback.from_user.id,
                exc,
            )
            await callback.message.answer(
                terms_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML",
                disable_web_page_preview=True,
            )
        await callback.answer()
    except Exception as exc:  # pragma: no cover - defensive fallback
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É—Å–ª–æ–≤–∏–π: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "show_disclaimer")
async def show_disclaimer(callback: CallbackQuery) -> None:
    try:
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∏—Å–∫–ª–µ–π–º–µ—Ä", callback.from_user.id)
        disclaimer_text = DISCLAIMER_TEXT
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.button(text="üìã –£—Å–ª–æ–≤–∏—è", callback_data="show_terms")
        builder.adjust(2)
        try:
            await callback.message.edit_text(
                disclaimer_text, reply_markup=builder.as_markup(), parse_mode="HTML"
            )
        except TelegramBadRequest as exc:
            logger.debug(
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /disclaimer —É %s: %s. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.",
                callback.from_user.id,
                exc,
            )
            await callback.message.answer(
                disclaimer_text, reply_markup=builder.as_markup(), parse_mode="HTML"
            )
        await callback.answer()
    except Exception as exc:  # pragma: no cover - defensive fallback
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞: %s", exc)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


__all__ = ["router"]
