# telegram/handlers/start.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
import asyncio
from typing import Union
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from logger import logger

# –ò–º–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–∞ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞ –∏–∑ terms.py
from telegram.handlers.terms import DISCLAIMER_TEXT

router = Router()

START_MESSAGE = (
    "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Football Predictor Bot!</b>\n\n"
    "ü§ñ –Ø –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ò–ò –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è "
    "–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–æ–≤ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π.\n"
    "üîÆ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–≤—É—Ö –∫–æ–º–∞–Ω–¥, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º "
    "–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞–≤–∫–∞–º.\n"
    "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
)

MAIN_MENU_TEXT = "üèÜ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Football Predictor Bot</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def send_main_menu(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÆ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="make_prediction")
        builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")
        builder.button(text="üìö –ü—Ä–∏–º–µ—Ä—ã", callback_data="show_examples")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")
        builder.button(text="‚öñÔ∏è –£—Å–ª–æ–≤–∏—è", callback_data="show_terms")
        builder.button(text="‚ö†Ô∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä", callback_data="show_disclaimer")
        builder.adjust(2)

        menu_text = MAIN_MENU_TEXT
        await message.answer(menu_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        logger.debug(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")

# --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback ---
async def edit_or_send_main_menu(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø—ã—Ç–∞—è—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ."""
    try:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} ({callback.from_user.username or 'N/A'}) –∑–∞–ø—Ä–æ—Å–∏–ª –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        builder = InlineKeyboardBuilder()
        builder.button(text="üîÆ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="make_prediction")
        builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")
        builder.button(text="üìö –ü—Ä–∏–º–µ—Ä—ã", callback_data="show_examples")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")
        builder.button(text="‚öñÔ∏è –£—Å–ª–æ–≤–∏—è", callback_data="show_terms")
        builder.button(text="‚ö†Ô∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä", callback_data="show_disclaimer")
        builder.adjust(2)

        menu_text = MAIN_MENU_TEXT
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(menu_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except TelegramBadRequest as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ),
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            logger.debug(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
            await callback.message.answer(menu_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        
        await callback.answer() # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({message.from_user.username or 'N/A'}) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(START_MESSAGE, parse_mode="HTML")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_main_menu(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        await edit_or_send_main_menu(callback)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "show_help")
async def show_help(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
    try:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
        help_text = (
            "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ Football Predictor Bot</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ /predict <code>–ö–æ–º–∞–Ω–¥–∞1 - –ö–æ–º–∞–Ω–¥–∞2</code> - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑\n"
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ /examples - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "‚Ä¢ /terms - –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ /disclaimer - –û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        try:
            await callback.message.edit_text(help_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except TelegramBadRequest as e:
            logger.debug(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /help —É {callback.from_user.id}: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
            await callback.message.answer(help_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–ø—Ä–∞–≤–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "show_examples")
async def show_examples(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    try:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∏–º–µ—Ä—ã")
        examples_text = (
            "üìö <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Football Predictor Bot</b>\n\n"
            "1. –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞:\n"
            "<code>/predict –ë–∞–≤–∞—Ä–∏—è - –ë–æ—Ä—É—Å—Å–∏—è –î</code>\n\n"
            "2. –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–∞—Ç—á–∞ –õ–∏–≥–∏ –ß–µ–º–ø–∏–æ–Ω–æ–≤:\n"
            "<code>/predict –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ - –ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏</code>\n\n"
            "3. –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–∞—Ç—á–µ–π –ê–ü–õ:\n"
            "<code>/predict –õ–∏–≤–µ—Ä–ø—É–ª—å - –ß–µ–ª—Å–∏</code>\n\n"
            "–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥–æ–≤, —Ç–æ—Ç–∞–ª–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Ç.–¥."
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        try:
            await callback.message.edit_text(examples_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except TelegramBadRequest as e:
            logger.debug(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /examples —É {callback.from_user.id}: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
            await callback.message.answer(examples_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "show_stats")
async def show_stats(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞."""
    try:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Football Predictor Bot</b>\n\n"
            "–í–µ—Ä—Å–∏—è: 1.0.0\n"
            "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: 0\n"
            "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1\n"
            "–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: N/A\n\n"
            "<i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø–æ –º–µ—Ä–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.</i>"
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        try:
            await callback.message.edit_text(stats_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except TelegramBadRequest as e:
            logger.debug(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /stats —É {callback.from_user.id}: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
            await callback.message.answer(stats_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "show_terms")
async def show_terms(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    try:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —É—Å–ª–æ–≤–∏—è")
        terms_text = (
            "‚öñÔ∏è <b>–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Football Predictor Bot</b>\n\n"
            "1. –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è '–∫–∞–∫ –µ—Å—Ç—å' –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≥–∞—Ä–∞–Ω—Ç–∏–π.\n"
            "2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–∞—è –±–æ—Ç–æ–º, –Ω–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä.\n"
            "3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ —É–±—ã—Ç–∫–∏ –∏–ª–∏ —É—â–µ—Ä–±, "
            "–≤–æ–∑–Ω–∏–∫—à–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–π –±–æ—Ç–æ–º.\n"
            "4. –ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —ç—Ç–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏."
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.button(text="‚ö†Ô∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä", callback_data="show_disclaimer")
        builder.adjust(2)
        try:
            await callback.message.edit_text(terms_text, reply_markup=builder.as_markup(), parse_mode="HTML", disable_web_page_preview=True)
        except TelegramBadRequest as e:
            logger.debug(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /terms —É {callback.from_user.id}: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
            await callback.message.answer(terms_text, reply_markup=builder.as_markup(), parse_mode="HTML", disable_web_page_preview=True)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É—Å–ª–æ–≤–∏–π: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "show_disclaimer")
async def show_disclaimer(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∏—Å–∫–ª–µ–π–º–µ—Ä."""
    try:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∏—Å–∫–ª–µ–π–º–µ—Ä")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞
        disclaimer_text = DISCLAIMER_TEXT
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.button(text="üìã –£—Å–ª–æ–≤–∏—è", callback_data="show_terms")
        builder.adjust(2)
        try:
            await callback.message.edit_text(disclaimer_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except TelegramBadRequest as e:
            logger.debug(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /disclaimer —É {callback.from_user.id}: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
            await callback.message.answer(disclaimer_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
__all__ = ["router"]
