# @file: telegram/bot.py
# –õ–æ–≥–∏–∫–∞ Telegram-–±–æ—Ç–∞: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∑–∞–ø—É—Å–∫ polling.
import asyncio
from contextlib import suppress

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError
from aiogram.types import BotCommand

from app.runtime_state import STATE
from app.utils import retry_async
from config import settings
from database.cache_postgres import init_cache
from logger import logger
from .middlewares import (
    IdempotencyMiddleware,
    ProcessingTimeMiddleware,
    RateLimitMiddleware,
)


class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram-–±–æ—Ç–æ–º."""

    def __init__(self) -> None:
        self.bot: Bot | None = None
        self.dp: Dispatcher | None = None
        self.is_initialized = False
        self.is_running = False
        self._internal_shutdown = asyncio.Event()
        self._active_shutdown: asyncio.Event | None = None
        self._active_tasks: set[asyncio.Task] = set()
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramBot")

    async def initialize(self) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
        if self.is_initialized:
            logger.warning("–ë–æ—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        if not settings.TELEGRAM_BOT_TOKEN:
            raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

        try:
            self.bot = Bot(
                token=settings.TELEGRAM_BOT_TOKEN,
                default=DefaultBotProperties(
                    parse_mode=ParseMode.HTML,
                    link_preview_is_disabled=True,
                ),
            )
            logger.info("‚úÖ Telegram Bot –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ PostgreSQL...")
            await retry_async(init_cache)
            logger.info("‚úÖ –ö—ç—à PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            self.dp = Dispatcher()
            message_rate = RateLimitMiddleware()
            callback_rate = RateLimitMiddleware()
            self.dp.message.middleware.register(message_rate)
            self.dp.callback_query.middleware.register(callback_rate)
            self.dp.message.middleware.register(IdempotencyMiddleware())
            timing = ProcessingTimeMiddleware()
            self.dp.message.middleware.register(timing)
            self.dp.callback_query.middleware.register(timing)

            await self._register_handlers()
            await retry_async(self._set_bot_commands)

            self.is_initialized = True
            logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as exc:  # pragma: no cover - defensive
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %s", exc)
            raise

    async def _register_handlers(self) -> None:
        if not self.dp:
            raise RuntimeError("–î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        try:
            from .handlers import register_handlers

            register_handlers(self.dp)
            logger.info("‚úÖ –†–æ—É—Ç–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as exc:  # pragma: no cover - defensive
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤: %s", exc)
            raise

    async def _set_bot_commands(self) -> None:
        if not self.bot:
            return
        try:
            commands = [
                BotCommand(command="start", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
                BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞ –∏ –ø—Ä–∏–º–µ—Ä—ã"),
                BotCommand(command="today", description="–ú–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
                BotCommand(command="match", description="–ö–∞—Ä—Ç–æ—á–∫–∞ –º–∞—Ç—á–∞"),
                BotCommand(command="explain", description="–û–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"),
                BotCommand(command="league", description="–ú–∞—Ç—á–∏ –ª–∏–≥–∏"),
                BotCommand(command="subscribe", description="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç"),
                BotCommand(command="settings", description="–õ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
                BotCommand(command="export", description="–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞"),
                BotCommand(command="about", description="–í–µ—Ä—Å–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å"),
            ]
            await self.bot.set_my_commands(commands)
            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except TelegramAPIError as exc:
            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: %s", exc)
        except Exception as exc:  # pragma: no cover - defensive
            logger.warning("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: %s", exc)

    async def on_startup(self) -> None:
        try:
            if not self.bot:
                raise RuntimeError("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            bot_info = await retry_async(self.bot.get_me)
            logger.info("‚úÖ –ë–æ—Ç @%s –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", bot_info.username)
            logger.info("ü§ñ Bot ID: %s", bot_info.id)
            if settings.DEBUG_MODE:
                logger.info("üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")
            self.is_running = True
            STATE.polling_ready = True
        except TelegramAPIError as exc:
            logger.error("‚ùå –û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: %s", exc)
        except Exception as exc:  # pragma: no cover - defensive
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: %s", exc)

    async def on_shutdown(self) -> None:
        try:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞...")
            self.is_running = False
            STATE.polling_ready = False
            logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as exc:  # pragma: no cover - defensive
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: %s", exc)

    async def run(
        self,
        dry_run: bool = False,
        shutdown_event: asyncio.Event | None = None,
    ) -> None:
        try:
            try:
                delay = max(0.0, float(settings.STARTUP_DELAY_SEC))
            except (TypeError, ValueError):
                delay = 0.0
            if delay:
                logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–æ—Ç–∞ %.2f c", delay)
                await asyncio.sleep(delay)

            await self.initialize()

            if not self.bot or not self.dp:
                raise RuntimeError("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            if dry_run:
                logger.info("üö¶ Dry-run: –ø—Ä–æ–ø—É—Å–∫ –∑–∞–ø—É—Å–∫–∞ polling")
                await self.cleanup()
                return

            self._active_shutdown = shutdown_event or self._internal_shutdown

            self.dp.startup.register(self.on_startup)
            self.dp.shutdown.register(self.on_shutdown)

            logger.info("üöÄ –ó–∞–ø—É—Å–∫ polling...")
            polling_task = asyncio.create_task(
                self.dp.start_polling(
                    self.bot,
                    allowed_updates=["message", "callback_query"],
                    skip_updates=True,
                    handle_as_tasks=True,
                )
            )
            shutdown_task = asyncio.create_task(self._active_shutdown.wait())
            self._active_tasks.update({polling_task, shutdown_task})

            done, pending = await asyncio.wait(
                {polling_task, shutdown_task},
                return_when=asyncio.FIRST_COMPLETED,
            )

            if shutdown_task in done:
                logger.info("üõë –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º polling...")
                try:
                    await self.dp.stop_polling()
                except Exception as exc:  # pragma: no cover - defensive
                    logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling: %s", exc)
                if polling_task in pending or not polling_task.done():
                    polling_task.cancel()
                    with suppress(asyncio.CancelledError):
                        await polling_task

        except ValueError as exc:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %s", exc)
        except TelegramAPIError as exc:
            logger.error("‚ùå –û—à–∏–±–∫–∞ Telegram API: %s", exc)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã (Ctrl+C)")
        except Exception as exc:  # pragma: no cover - defensive
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: %s", exc, exc_info=True)
        finally:
            await self.cleanup()

    async def cleanup(self) -> None:
        try:
            logger.info("üßπ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –±–æ—Ç–∞...")

            for task in list(self._active_tasks):
                if not task.done():
                    task.cancel()
                    with suppress(asyncio.CancelledError):
                        await task
            self._active_tasks.clear()

            if self.bot:
                await self.bot.session.close()
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")

            if self.dp:
                await self.dp.fsm.storage.close()
                logger.info("‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ FSM –∑–∞–∫—Ä—ã—Ç–æ")

            self.is_initialized = False
            self.is_running = False
            STATE.polling_ready = False
            if self._active_shutdown is None or self._active_shutdown is self._internal_shutdown:
                self._internal_shutdown = asyncio.Event()
            self._active_shutdown = None
            logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –±–æ—Ç–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
        except Exception as exc:  # pragma: no cover - defensive
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: %s", exc)

    async def stop(self) -> None:
        logger.info("üõë –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ TelegramBot")
        (self._active_shutdown or self._internal_shutdown).set()
        if self.dp:
            try:
                await self.dp.stop_polling()
            except Exception as exc:  # pragma: no cover - defensive
                logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling: %s", exc)


_bot_instance: TelegramBot | None = None


async def get_bot() -> TelegramBot:
    global _bot_instance
    if _bot_instance is None:
        _bot_instance = TelegramBot()
    return _bot_instance


async def main(
    dry_run: bool = False,
    shutdown_event: asyncio.Event | None = None,
) -> None:
    bot = await get_bot()
    await bot.run(dry_run=dry_run, shutdown_event=shutdown_event)


async def start_bot(dry_run: bool = False) -> None:
    await main(dry_run=dry_run)


__all__ = ["TelegramBot", "main", "start_bot", "get_bot"]
