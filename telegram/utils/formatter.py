# telegram/utils/formatter.py
"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤."""
# –î–æ–±–∞–≤–ª–µ–Ω Union –≤ –∏–º–ø–æ—Ä—Ç typing –Ω–∞ —Å–ª—É—á–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ –∏–ª–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
from typing import Any

from logger import logger  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º logger –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


def _pct(value: float | int) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã.

    Args:
        value (Union[float, int]): –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (0-1 –∏–ª–∏ 0-100)

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    """
    try:
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-1, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100
        if isinstance(value, float | int) and 0 <= value <= 1:
            return f"{value * 100:.1f}%"
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100, –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        elif isinstance(value, float | int):
            return f"{value:.1f}%"
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return str(value)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è {value}: {e}")
        return "N/A"


def _format_top_scores(top_scores: dict[str, float]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Ç–æ—á–Ω–æ–≥–æ —Å—á–µ—Ç–∞.

    Args:
        top_scores (Dict[str, float]): –°–ª–æ–≤–∞—Ä—å —Å—á–µ—Ç–æ–≤ –∏ –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ç–æ–ø —Å—á–µ—Ç–∞–º–∏
    """
    try:
        if not top_scores:
            return "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–æ—Ç –≤—ã—Å–æ–∫–æ–π –∫ –Ω–∏–∑–∫–æ–π) –∏ –±–µ—Ä–µ–º —Ç–æ–ø-3
        sorted_scores = sorted(top_scores.items(), key=lambda x: x[1], reverse=True)[:3]

        formatted_scores = []
        for score, prob in sorted_scores:
            formatted_prob = _pct(prob)
            formatted_scores.append(f"  {score}: {formatted_prob}")

        return "\n".join(formatted_scores) if formatted_scores else "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–ø —Å—á–µ—Ç–æ–≤: {e}")
        return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"


def format_prediction_result(prediction_result: dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        prediction_result (Dict[str, Any]): –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
    """
    try:
        if prediction_result.get("error"):
            error_msg = prediction_result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            logger.warning(
                f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: –ø–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ —Å –æ—à–∏–±–∫–æ–π: {error_msg}"
            )
            return f"‚ùå –û—à–∏–±–∫–∞: {error_msg}"

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
        match_info = prediction_result.get("match", "–ú–∞—Ç—á –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        base_goals = prediction_result.get("base_expected_goals", {})
        mod_goals = prediction_result.get("modified_expected_goals", {})

        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥–æ–≤
        probs = prediction_result.get("probabilities", {})
        p1 = probs.get("1", 0) * 100  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-1
        x = probs.get("X", 0) * 100
        p2 = probs.get("2", 0) * 100

        # –¢–æ—Ç–∞–ª—ã
        over_2_5 = prediction_result.get("over_2_5", 0)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if isinstance(over_2_5, float) and 0 <= over_2_5 <= 1:
            over_2_5 *= 100

        under_2_5 = prediction_result.get("under_2_5", 0)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if isinstance(under_2_5, float) and 0 <= under_2_5 <= 1:
            under_2_5 *= 100

        # –û–±–µ –∑–∞–±—å—é—Ç
        btts_yes = prediction_result.get("btts_yes", 0)
        btts_no = prediction_result.get("btts_no", 0)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if isinstance(btts_yes, float) and 0 <= btts_yes <= 1:
            btts_yes *= 100
        if isinstance(btts_no, float) and 0 <= btts_no <= 1:
            btts_no *= 100

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        recommendation = prediction_result.get("recommendation", "–°—Ç–∞–≤–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
        confidence = prediction_result.get("confidence", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        risk_level = prediction_result.get("risk_level", "–≤—ã—Å–æ–∫–∏–π")

        # –¢–æ–ø —Å—á–µ—Ç–æ–≤
        top_scores = prediction_result.get("top_scores", {})

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ø —Å—á–µ—Ç–∞
        top_scores_text = _format_top_scores(top_scores)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è "–û–±–µ –∑–∞–±—å—é—Ç"
        btts_text = f"–û–±–µ –∑–∞–±—å—é—Ç: –î–∞ {_pct(btts_yes)} / –ù–µ—Ç {_pct(btts_no)}"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ø —Å—á–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ 0-1 –∏–ª–∏ 0-100
        # top_scores_items = list(top_scores.items())[:3]
        # formatted_top_scores = []
        # for score, prob in top_scores_items:
        #     if isinstance(prob, float) and 0 <= prob <= 1:
        #         formatted_prob = f"{prob * 100:.1f}%"
        #     elif isinstance(prob, float):
        #         formatted_prob = f"{prob:.1f}%"
        #     else:
        #         formatted_prob = f"{prob}" # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø
        #     formatted_top_scores.append(f"  {score}: {formatted_prob}")
        # top_scores_text = "\n".join(formatted_top_scores) if formatted_top_scores else "  –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

        formatted_text = (
            f"üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á:</b>\n"
            f"<b>{match_info}</b>\n\n"
            f"‚öΩ <b>–û–∂–∏–¥–∞–µ–º—ã–µ –≥–æ–ª—ã:</b>\n"
            f"  –ë–∞–∑–æ–≤—ã–µ: {base_goals.get('home', 'N/A'):.2f} - {base_goals.get('away', 'N/A'):.2f}\n"
            f"  –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {mod_goals.get('home', 'N/A'):.2f} - {mod_goals.get('away', 'N/A'):.2f}\n\n"
            f"üìä <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥–æ–≤:</b>\n"
            f"  –ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤: {p1:.1f}%\n"
            f"  –ù–∏—á—å—è: {x:.1f}%\n"
            f"  –ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π: {p2:.1f}%\n\n"
            f"üìà <b>–¢–æ—Ç–∞–ª—ã:</b>\n"
            f"  –¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ 2.5: {_pct(over_2_5)}\n"
            f"  –¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ 2.5: {_pct(under_2_5)}\n\n"
            f"üë• <b>{btts_text}</b>\n\n"
            f"üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>\n"
            f"  {recommendation}\n"
            f"  –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence} ({risk_level})\n\n"
            f"üíØ <b>–¢–æ–ø —Ç–æ—á–Ω—ã—Ö —Å—á–µ—Ç–æ–≤:</b>\n"
            f"{top_scores_text}"
        )

        logger.debug("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω")
        return formatted_text

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}"
        logger.error(error_msg, exc_info=True)
        return error_msg
